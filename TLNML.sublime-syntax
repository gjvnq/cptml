%YAML 1.2
---
name: TLNML
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - tlnml
scope: text.tlnml
uuid: b818f9c7-23d5-46c3-a182-06ab89c00b38

variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[\p{L}:_][\p{L}\p{Nd}:._-]*'
  # "Hack"
  idname: '[\p{L}:_][\p{L}\p{Nd}:_-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([\p{L}_][\p{L}\p{Nd}._-]*|)(:))?([\p{L}_][[:alnum:]._-]*)'

# USE LATEX SYNTAX CONTEXTS TO IMPROVE COLORS!!!

contexts:
  main:
    - include: declaration
    - include: general
  general:
    - include: comment
    - include: namespace
    - include: entity
    - include: textag
    - include: xmltag
    - match: '([\}\{<>])'
      scope: invalid.illegal.tlnml
  textag:
    - match: '(\\)({{qualified_name}})'
      captures:
        1: entity.name.tag punctuation.definition.tag.begin.tlnml
        3: entity.name.tag.namespace.tlnml
        4: entity.name.tag.tlnml punctuation.separator.namespace.tlnml
        5: entity.name.tag.localname.tlnml
      push:
        - meta_scope: meta.tag.tlnml
        - match: '(\s|\{)'
          scope: punctuation.definition.tag.end.tlnml
          set:
            - meta_scope: text.tlnml
            - match: '(\})'
              scope: punctuation.definition.tag.end.tlnml
              pop: true
            - include: general
        - match: '\['
          scope: punctuation.group.brace.start
          push: texargs
        - match: '#{{idname}}'
          scope: entity.other.attribute-name.id
        - match: '.{{idname}}'
          scope: entity.other.attribute-name.class
  texargs:
    - match: '\]'
      scope: punctuation.group.brace.end
      pop: true
    - match: '{{qualified_name}}(=)?'
      captures:
        1: entity.other.attribute-name.namespace.tlnml
        2: entity.other.attribute-name.tlnml punctuation.separator.namespace.tlnml
        3: entity.other.attribute-name.localname.tlnml
        4: punctuation.separator.key-value.tlnml
      push:
        - match: '(\s|(?=\]))'
          pop: true
        - include: double-quoted-string
        - include: single-quoted-string
        - match: '[^"\s\]]*'
          scope: string.unquoted.tlnml
  xmltag:
    - match: '(<)(/|)(({{name}})(\|)|)({{qualified_name}}|)'
      captures:
        1: entity.name.tag punctuation.definition.tag.tlnml
        2: entity.name.tag punctuation.definition.tag.end.tlnml
        4: entity.name.tag.view.tlnml
        5: entity.name.tag.view.tlnml punctuation.definition.view.tlnml
        6: entity.name.tag.namespace.tlnml
        7: entity.name.tag.tlnml punctuation.separator.namespace.tlnml
        8: entity.name.tag.localname.tlnml
      push:
        - meta_scope: meta.tag.tlnml
        - match: '(>)'
          scope: entity.name.tag punctuation.definition.tag.end.tlnml
          pop: true
        - match: '{{qualified_name}}(=)?'
          captures:
            1: entity.other.attribute-name.namespace.tlnml
            2: entity.other.attribute-name.tlnml punctuation.separator.namespace.tlnml
            3: entity.other.attribute-name.localname.tlnml
            4: punctuation.separator.key-value.tlnml
          push:
            - match: '(\s|(?=>))'
              pop: true
            - include: double-quoted-string
            - include: single-quoted-string
            - match: '[^"\s\]]*'
              scope: string.unquoted.tlnml

  declaration:
    - match: '(<\?)(tlnml)' #(?=\s)'
      captures:
        1: punctuation.definition.tag.begin.tlnml
        2: keyword.declaration.tlnml
      push:
        - meta_scope: meta.tag.preprocessor.tlnml
        - match: '\?>'
          scope: punctuation.definition.tag.end.tlnml
          pop: true
        - match: '\s+{{qualified_name}}(=)?'
          captures:
            1: entity.other.attribute-name.namespace.tlnml
            2: entity.other.attribute-name.tlnml punctuation.separator.namespace.tlnml
            3: entity.other.attribute-name.localname.tlnml
            4: punctuation.separator.key-value.tlnml
        - include: double-quoted-string
        - include: single-quoted-string
  namespace:
    - match: '(<\?)(ns)'
      captures:
        1: punctuation.definition.tag.begin.tlnml
        2: keyword.declaration.tlnml
      push:
        - meta_scope: meta.tag.preprocessor.tlnml
        - match: '\?>'
          scope: punctuation.definition.tag.end.tlnml
          pop: true
        - match: '\s+{{qualified_name}}(=)?'
          captures:
            1: entity.other.attribute-name.namespace.tlnml
            2: entity.other.attribute-name.tlnml punctuation.separator.namespace.tlnml
            3: entity.other.attribute-name.localname.tlnml
            4: punctuation.separator.key-value.tlnml
        - include: double-quoted-string
        - include: single-quoted-string
  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.tlnml
      push:
        - meta_scope: string.quoted.double.tlnml
        - match: '"'
          scope: punctuation.definition.string.end.tlnml
          pop: true
        - include: escape
  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.tlnml
      push:
        - meta_scope: string.quoted.single.tlnml
        - match: "'"
          scope: punctuation.definition.string.end.tlnml
          pop: true
        - include: escape
  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.begin.tlnml
      push:
        - meta_scope: comment.block.tlnml
        - include: comment
        - match: '-->'
          scope: punctuation.definition.comment.end.tlnml
          pop: true
        - match: '-{2,}'
          scope: invalid.illegal.double-hyphen-within-comment.tlnml
  escape:
    - match: '(\\(u[a-f0-9A-F]{4}|U[a-f0-9A-F]+;|.))'
      scope: constant.character.entity.tlnml
  entity:
    - match: '(&)((?:{{name}}|#[0-9]+|#x\h+)(;)|.)'
      scope: constant.character.entity.tlnml
      captures:
        1: punctuation.definition.constant.tlnml
        2: punctuation.definition.constant.tlnml
  # keywords:
  #   # Keywords are if, else for and while.
  #   # Note that blackslashes don't need to be escaped within single quoted
  #   # strings in YAML. When using single quoted strings, only single quotes
  #   # need to be escaped: this is done by using two single quotes next to each
  #   # other.
  #   - match: '\b(if|else|for|while)\b'
  #     scope: keyword.control.example-c

  # numbers:
  #   - match: '\b(-)?[0-9.]+\b'
  #     scope: constant.numeric.example-c

  # strings:
  #   # Strings begin and end with quotes, and use backslashes as an escape
  #   # character.
  #   - match: '"'
  #     scope: punctuation.definition.string.begin.example-c
  #     push: inside_string

  # inside_string:
  #   - meta_include_prototype: false
  #   - meta_scope: string.quoted.double.example-c
  #   - match: '\.'
  #     scope: constant.character.escape.example-c
  #   - match: '"'
  #     scope: punctuation.definition.string.end.example-c
  #     pop: true

  # comments:
  #   # Comments begin with a '//' and finish at the end of the line.
  #   - match: '//'
  #     scope: punctuation.definition.comment.example-c
  #     push:
  #       # This is an anonymous context push for brevity.
  #       - meta_scope: comment.line.double-slash.example-c
  #       - match: $\n?
  #         pop: true
